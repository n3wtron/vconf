// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kataras/iris (interfaces: Context)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	context "github.com/kataras/iris/context"
	memstore "github.com/kataras/iris/core/memstore"
	io "io"
	multipart "mime/multipart"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockContext is a mock of Context interface
type MockContext struct {
	ctrl     *gomock.Controller
	recorder *MockContextMockRecorder
}

// MockContextMockRecorder is the mock recorder for MockContext
type MockContextMockRecorder struct {
	mock *MockContext
}

// NewMockContext creates a new mock instance
func NewMockContext(ctrl *gomock.Controller) *MockContext {
	mock := &MockContext{ctrl: ctrl}
	mock.recorder = &MockContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContext) EXPECT() *MockContextMockRecorder {
	return m.recorder
}

// AddHandler mocks base method
func (m *MockContext) AddHandler(arg0 ...context.Handler) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddHandler", varargs...)
}

// AddHandler indicates an expected call of AddHandler
func (mr *MockContextMockRecorder) AddHandler(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockContext)(nil).AddHandler), arg0...)
}

// Application mocks base method
func (m *MockContext) Application() context.Application {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(context.Application)
	return ret0
}

// Application indicates an expected call of Application
func (mr *MockContextMockRecorder) Application() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockContext)(nil).Application))
}

// BeginRequest mocks base method
func (m *MockContext) BeginRequest(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginRequest", arg0, arg1)
}

// BeginRequest indicates an expected call of BeginRequest
func (mr *MockContextMockRecorder) BeginRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRequest", reflect.TypeOf((*MockContext)(nil).BeginRequest), arg0, arg1)
}

// BeginTransaction mocks base method
func (m *MockContext) BeginTransaction(arg0 func(*context.Transaction)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginTransaction", arg0)
}

// BeginTransaction indicates an expected call of BeginTransaction
func (mr *MockContextMockRecorder) BeginTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockContext)(nil).BeginTransaction), arg0)
}

// Binary mocks base method
func (m *MockContext) Binary(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Binary", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Binary indicates an expected call of Binary
func (mr *MockContextMockRecorder) Binary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Binary", reflect.TypeOf((*MockContext)(nil).Binary), arg0)
}

// CheckIfModifiedSince mocks base method
func (m *MockContext) CheckIfModifiedSince(arg0 time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfModifiedSince", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfModifiedSince indicates an expected call of CheckIfModifiedSince
func (mr *MockContextMockRecorder) CheckIfModifiedSince(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfModifiedSince", reflect.TypeOf((*MockContext)(nil).CheckIfModifiedSince), arg0)
}

// ClientSupportsGzip mocks base method
func (m *MockContext) ClientSupportsGzip() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientSupportsGzip")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ClientSupportsGzip indicates an expected call of ClientSupportsGzip
func (mr *MockContextMockRecorder) ClientSupportsGzip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientSupportsGzip", reflect.TypeOf((*MockContext)(nil).ClientSupportsGzip))
}

// ContentType mocks base method
func (m *MockContext) ContentType(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ContentType", arg0)
}

// ContentType indicates an expected call of ContentType
func (mr *MockContextMockRecorder) ContentType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockContext)(nil).ContentType), arg0)
}

// Do mocks base method
func (m *MockContext) Do(arg0 context.Handlers) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Do", arg0)
}

// Do indicates an expected call of Do
func (mr *MockContextMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockContext)(nil).Do), arg0)
}

// EndRequest mocks base method
func (m *MockContext) EndRequest() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndRequest")
}

// EndRequest indicates an expected call of EndRequest
func (mr *MockContextMockRecorder) EndRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndRequest", reflect.TypeOf((*MockContext)(nil).EndRequest))
}

// Exec mocks base method
func (m *MockContext) Exec(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Exec", arg0, arg1)
}

// Exec indicates an expected call of Exec
func (mr *MockContextMockRecorder) Exec(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockContext)(nil).Exec), arg0, arg1)
}

// FormFile mocks base method
func (m *MockContext) FormFile(arg0 string) (multipart.File, *multipart.FileHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormFile", arg0)
	ret0, _ := ret[0].(multipart.File)
	ret1, _ := ret[1].(*multipart.FileHeader)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FormFile indicates an expected call of FormFile
func (mr *MockContextMockRecorder) FormFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormFile", reflect.TypeOf((*MockContext)(nil).FormFile), arg0)
}

// FormValue mocks base method
func (m *MockContext) FormValue(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormValue", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormValue indicates an expected call of FormValue
func (mr *MockContextMockRecorder) FormValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormValue", reflect.TypeOf((*MockContext)(nil).FormValue), arg0)
}

// FormValueDefault mocks base method
func (m *MockContext) FormValueDefault(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormValueDefault", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormValueDefault indicates an expected call of FormValueDefault
func (mr *MockContextMockRecorder) FormValueDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormValueDefault", reflect.TypeOf((*MockContext)(nil).FormValueDefault), arg0, arg1)
}

// FormValues mocks base method
func (m *MockContext) FormValues() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormValues")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// FormValues indicates an expected call of FormValues
func (mr *MockContextMockRecorder) FormValues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormValues", reflect.TypeOf((*MockContext)(nil).FormValues))
}

// GetContentLength mocks base method
func (m *MockContext) GetContentLength() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentLength")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetContentLength indicates an expected call of GetContentLength
func (mr *MockContextMockRecorder) GetContentLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentLength", reflect.TypeOf((*MockContext)(nil).GetContentLength))
}

// GetContentType mocks base method
func (m *MockContext) GetContentType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContentType indicates an expected call of GetContentType
func (mr *MockContextMockRecorder) GetContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentType", reflect.TypeOf((*MockContext)(nil).GetContentType))
}

// GetContentTypeRequested mocks base method
func (m *MockContext) GetContentTypeRequested() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContentTypeRequested")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContentTypeRequested indicates an expected call of GetContentTypeRequested
func (mr *MockContextMockRecorder) GetContentTypeRequested() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContentTypeRequested", reflect.TypeOf((*MockContext)(nil).GetContentTypeRequested))
}

// GetCookie mocks base method
func (m *MockContext) GetCookie(arg0 string, arg1 ...context.CookieOption) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCookie", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCookie indicates an expected call of GetCookie
func (mr *MockContextMockRecorder) GetCookie(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCookie", reflect.TypeOf((*MockContext)(nil).GetCookie), varargs...)
}

// GetCurrentRoute mocks base method
func (m *MockContext) GetCurrentRoute() context.RouteReadOnly {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRoute")
	ret0, _ := ret[0].(context.RouteReadOnly)
	return ret0
}

// GetCurrentRoute indicates an expected call of GetCurrentRoute
func (mr *MockContextMockRecorder) GetCurrentRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRoute", reflect.TypeOf((*MockContext)(nil).GetCurrentRoute))
}

// GetHeader mocks base method
func (m *MockContext) GetHeader(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockContextMockRecorder) GetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockContext)(nil).GetHeader), arg0)
}

// GetReferrer mocks base method
func (m *MockContext) GetReferrer() context.Referrer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferrer")
	ret0, _ := ret[0].(context.Referrer)
	return ret0
}

// GetReferrer indicates an expected call of GetReferrer
func (mr *MockContextMockRecorder) GetReferrer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferrer", reflect.TypeOf((*MockContext)(nil).GetReferrer))
}

// GetStatusCode mocks base method
func (m *MockContext) GetStatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetStatusCode indicates an expected call of GetStatusCode
func (mr *MockContextMockRecorder) GetStatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusCode", reflect.TypeOf((*MockContext)(nil).GetStatusCode))
}

// GetViewData mocks base method
func (m *MockContext) GetViewData() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViewData")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// GetViewData indicates an expected call of GetViewData
func (mr *MockContextMockRecorder) GetViewData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViewData", reflect.TypeOf((*MockContext)(nil).GetViewData))
}

// Gzip mocks base method
func (m *MockContext) Gzip(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Gzip", arg0)
}

// Gzip indicates an expected call of Gzip
func (mr *MockContextMockRecorder) Gzip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gzip", reflect.TypeOf((*MockContext)(nil).Gzip), arg0)
}

// GzipResponseWriter mocks base method
func (m *MockContext) GzipResponseWriter() *context.GzipResponseWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GzipResponseWriter")
	ret0, _ := ret[0].(*context.GzipResponseWriter)
	return ret0
}

// GzipResponseWriter indicates an expected call of GzipResponseWriter
func (mr *MockContextMockRecorder) GzipResponseWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GzipResponseWriter", reflect.TypeOf((*MockContext)(nil).GzipResponseWriter))
}

// HTML mocks base method
func (m *MockContext) HTML(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTML", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HTML indicates an expected call of HTML
func (mr *MockContextMockRecorder) HTML(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTML", reflect.TypeOf((*MockContext)(nil).HTML), arg0)
}

// HandlerIndex mocks base method
func (m *MockContext) HandlerIndex(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerIndex", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// HandlerIndex indicates an expected call of HandlerIndex
func (mr *MockContextMockRecorder) HandlerIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerIndex", reflect.TypeOf((*MockContext)(nil).HandlerIndex), arg0)
}

// HandlerName mocks base method
func (m *MockContext) HandlerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// HandlerName indicates an expected call of HandlerName
func (mr *MockContextMockRecorder) HandlerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlerName", reflect.TypeOf((*MockContext)(nil).HandlerName))
}

// Handlers mocks base method
func (m *MockContext) Handlers() context.Handlers {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handlers")
	ret0, _ := ret[0].(context.Handlers)
	return ret0
}

// Handlers indicates an expected call of Handlers
func (mr *MockContextMockRecorder) Handlers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handlers", reflect.TypeOf((*MockContext)(nil).Handlers))
}

// Header mocks base method
func (m *MockContext) Header(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Header", arg0, arg1)
}

// Header indicates an expected call of Header
func (mr *MockContextMockRecorder) Header(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockContext)(nil).Header), arg0, arg1)
}

// Host mocks base method
func (m *MockContext) Host() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Host")
	ret0, _ := ret[0].(string)
	return ret0
}

// Host indicates an expected call of Host
func (mr *MockContextMockRecorder) Host() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Host", reflect.TypeOf((*MockContext)(nil).Host))
}

// IsAjax mocks base method
func (m *MockContext) IsAjax() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAjax")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAjax indicates an expected call of IsAjax
func (mr *MockContextMockRecorder) IsAjax() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAjax", reflect.TypeOf((*MockContext)(nil).IsAjax))
}

// IsMobile mocks base method
func (m *MockContext) IsMobile() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMobile")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMobile indicates an expected call of IsMobile
func (mr *MockContextMockRecorder) IsMobile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMobile", reflect.TypeOf((*MockContext)(nil).IsMobile))
}

// IsRecording mocks base method
func (m *MockContext) IsRecording() (*context.ResponseRecorder, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRecording")
	ret0, _ := ret[0].(*context.ResponseRecorder)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsRecording indicates an expected call of IsRecording
func (mr *MockContextMockRecorder) IsRecording() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRecording", reflect.TypeOf((*MockContext)(nil).IsRecording))
}

// IsStopped mocks base method
func (m *MockContext) IsStopped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStopped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStopped indicates an expected call of IsStopped
func (mr *MockContextMockRecorder) IsStopped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStopped", reflect.TypeOf((*MockContext)(nil).IsStopped))
}

// IsWWW mocks base method
func (m *MockContext) IsWWW() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWWW")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWWW indicates an expected call of IsWWW
func (mr *MockContextMockRecorder) IsWWW() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWWW", reflect.TypeOf((*MockContext)(nil).IsWWW))
}

// JSON mocks base method
func (m *MockContext) JSON(arg0 interface{}, arg1 ...context.JSON) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSON", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSON indicates an expected call of JSON
func (mr *MockContextMockRecorder) JSON(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockContext)(nil).JSON), varargs...)
}

// JSONP mocks base method
func (m *MockContext) JSONP(arg0 interface{}, arg1 ...context.JSONP) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "JSONP", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONP indicates an expected call of JSONP
func (mr *MockContextMockRecorder) JSONP(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONP", reflect.TypeOf((*MockContext)(nil).JSONP), varargs...)
}

// Markdown mocks base method
func (m *MockContext) Markdown(arg0 []byte, arg1 ...context.Markdown) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Markdown", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Markdown indicates an expected call of Markdown
func (mr *MockContextMockRecorder) Markdown(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markdown", reflect.TypeOf((*MockContext)(nil).Markdown), varargs...)
}

// MaxAge mocks base method
func (m *MockContext) MaxAge() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxAge")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxAge indicates an expected call of MaxAge
func (mr *MockContextMockRecorder) MaxAge() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxAge", reflect.TypeOf((*MockContext)(nil).MaxAge))
}

// Method mocks base method
func (m *MockContext) Method() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Method")
	ret0, _ := ret[0].(string)
	return ret0
}

// Method indicates an expected call of Method
func (mr *MockContextMockRecorder) Method() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockContext)(nil).Method))
}

// Next mocks base method
func (m *MockContext) Next() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Next")
}

// Next indicates an expected call of Next
func (mr *MockContextMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockContext)(nil).Next))
}

// NextHandler mocks base method
func (m *MockContext) NextHandler() context.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextHandler")
	ret0, _ := ret[0].(context.Handler)
	return ret0
}

// NextHandler indicates an expected call of NextHandler
func (mr *MockContextMockRecorder) NextHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextHandler", reflect.TypeOf((*MockContext)(nil).NextHandler))
}

// NextOr mocks base method
func (m *MockContext) NextOr(arg0 ...context.Handler) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NextOr", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextOr indicates an expected call of NextOr
func (mr *MockContextMockRecorder) NextOr(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextOr", reflect.TypeOf((*MockContext)(nil).NextOr), arg0...)
}

// NextOrNotFound mocks base method
func (m *MockContext) NextOrNotFound() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextOrNotFound")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextOrNotFound indicates an expected call of NextOrNotFound
func (mr *MockContextMockRecorder) NextOrNotFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextOrNotFound", reflect.TypeOf((*MockContext)(nil).NextOrNotFound))
}

// NotFound mocks base method
func (m *MockContext) NotFound() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotFound")
}

// NotFound indicates an expected call of NotFound
func (mr *MockContextMockRecorder) NotFound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockContext)(nil).NotFound))
}

// OnClose mocks base method
func (m *MockContext) OnClose(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnClose", arg0)
}

// OnClose indicates an expected call of OnClose
func (mr *MockContextMockRecorder) OnClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnClose", reflect.TypeOf((*MockContext)(nil).OnClose), arg0)
}

// OnConnectionClose mocks base method
func (m *MockContext) OnConnectionClose(arg0 func()) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConnectionClose", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// OnConnectionClose indicates an expected call of OnConnectionClose
func (mr *MockContextMockRecorder) OnConnectionClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConnectionClose", reflect.TypeOf((*MockContext)(nil).OnConnectionClose), arg0)
}

// Params mocks base method
func (m *MockContext) Params() *context.RequestParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(*context.RequestParams)
	return ret0
}

// Params indicates an expected call of Params
func (mr *MockContextMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockContext)(nil).Params))
}

// Path mocks base method
func (m *MockContext) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockContextMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockContext)(nil).Path))
}

// PostValue mocks base method
func (m *MockContext) PostValue(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValue", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// PostValue indicates an expected call of PostValue
func (mr *MockContextMockRecorder) PostValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValue", reflect.TypeOf((*MockContext)(nil).PostValue), arg0)
}

// PostValueBool mocks base method
func (m *MockContext) PostValueBool(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueBool", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostValueBool indicates an expected call of PostValueBool
func (mr *MockContextMockRecorder) PostValueBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueBool", reflect.TypeOf((*MockContext)(nil).PostValueBool), arg0)
}

// PostValueDefault mocks base method
func (m *MockContext) PostValueDefault(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueDefault", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// PostValueDefault indicates an expected call of PostValueDefault
func (mr *MockContextMockRecorder) PostValueDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueDefault", reflect.TypeOf((*MockContext)(nil).PostValueDefault), arg0, arg1)
}

// PostValueFloat64 mocks base method
func (m *MockContext) PostValueFloat64(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueFloat64", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostValueFloat64 indicates an expected call of PostValueFloat64
func (mr *MockContextMockRecorder) PostValueFloat64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueFloat64", reflect.TypeOf((*MockContext)(nil).PostValueFloat64), arg0)
}

// PostValueFloat64Default mocks base method
func (m *MockContext) PostValueFloat64Default(arg0 string, arg1 float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueFloat64Default", arg0, arg1)
	ret0, _ := ret[0].(float64)
	return ret0
}

// PostValueFloat64Default indicates an expected call of PostValueFloat64Default
func (mr *MockContextMockRecorder) PostValueFloat64Default(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueFloat64Default", reflect.TypeOf((*MockContext)(nil).PostValueFloat64Default), arg0, arg1)
}

// PostValueInt mocks base method
func (m *MockContext) PostValueInt(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueInt", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostValueInt indicates an expected call of PostValueInt
func (mr *MockContextMockRecorder) PostValueInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueInt", reflect.TypeOf((*MockContext)(nil).PostValueInt), arg0)
}

// PostValueInt64 mocks base method
func (m *MockContext) PostValueInt64(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueInt64", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostValueInt64 indicates an expected call of PostValueInt64
func (mr *MockContextMockRecorder) PostValueInt64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueInt64", reflect.TypeOf((*MockContext)(nil).PostValueInt64), arg0)
}

// PostValueInt64Default mocks base method
func (m *MockContext) PostValueInt64Default(arg0 string, arg1 int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueInt64Default", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// PostValueInt64Default indicates an expected call of PostValueInt64Default
func (mr *MockContextMockRecorder) PostValueInt64Default(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueInt64Default", reflect.TypeOf((*MockContext)(nil).PostValueInt64Default), arg0, arg1)
}

// PostValueIntDefault mocks base method
func (m *MockContext) PostValueIntDefault(arg0 string, arg1 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueIntDefault", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// PostValueIntDefault indicates an expected call of PostValueIntDefault
func (mr *MockContextMockRecorder) PostValueIntDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueIntDefault", reflect.TypeOf((*MockContext)(nil).PostValueIntDefault), arg0, arg1)
}

// PostValueTrim mocks base method
func (m *MockContext) PostValueTrim(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValueTrim", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// PostValueTrim indicates an expected call of PostValueTrim
func (mr *MockContextMockRecorder) PostValueTrim(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValueTrim", reflect.TypeOf((*MockContext)(nil).PostValueTrim), arg0)
}

// PostValues mocks base method
func (m *MockContext) PostValues(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostValues", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// PostValues indicates an expected call of PostValues
func (mr *MockContextMockRecorder) PostValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostValues", reflect.TypeOf((*MockContext)(nil).PostValues), arg0)
}

// Proceed mocks base method
func (m *MockContext) Proceed(arg0 context.Handler) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proceed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Proceed indicates an expected call of Proceed
func (mr *MockContextMockRecorder) Proceed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proceed", reflect.TypeOf((*MockContext)(nil).Proceed), arg0)
}

// ReadForm mocks base method
func (m *MockContext) ReadForm(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadForm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadForm indicates an expected call of ReadForm
func (mr *MockContextMockRecorder) ReadForm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadForm", reflect.TypeOf((*MockContext)(nil).ReadForm), arg0)
}

// ReadJSON mocks base method
func (m *MockContext) ReadJSON(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJSON", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON
func (mr *MockContextMockRecorder) ReadJSON(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSON", reflect.TypeOf((*MockContext)(nil).ReadJSON), arg0)
}

// ReadXML mocks base method
func (m *MockContext) ReadXML(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadXML", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadXML indicates an expected call of ReadXML
func (mr *MockContextMockRecorder) ReadXML(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadXML", reflect.TypeOf((*MockContext)(nil).ReadXML), arg0)
}

// Record mocks base method
func (m *MockContext) Record() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Record")
}

// Record indicates an expected call of Record
func (mr *MockContextMockRecorder) Record() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockContext)(nil).Record))
}

// Recorder mocks base method
func (m *MockContext) Recorder() *context.ResponseRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recorder")
	ret0, _ := ret[0].(*context.ResponseRecorder)
	return ret0
}

// Recorder indicates an expected call of Recorder
func (mr *MockContextMockRecorder) Recorder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recorder", reflect.TypeOf((*MockContext)(nil).Recorder))
}

// Redirect mocks base method
func (m *MockContext) Redirect(arg0 string, arg1 ...int) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Redirect", varargs...)
}

// Redirect indicates an expected call of Redirect
func (mr *MockContextMockRecorder) Redirect(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redirect", reflect.TypeOf((*MockContext)(nil).Redirect), varargs...)
}

// RemoteAddr mocks base method
func (m *MockContext) RemoteAddr() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(string)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr
func (mr *MockContextMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockContext)(nil).RemoteAddr))
}

// RemoveCookie mocks base method
func (m *MockContext) RemoveCookie(arg0 string, arg1 ...context.CookieOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "RemoveCookie", varargs...)
}

// RemoveCookie indicates an expected call of RemoveCookie
func (mr *MockContextMockRecorder) RemoveCookie(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCookie", reflect.TypeOf((*MockContext)(nil).RemoveCookie), varargs...)
}

// Request mocks base method
func (m *MockContext) Request() *http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockContextMockRecorder) Request() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockContext)(nil).Request))
}

// RequestPath mocks base method
func (m *MockContext) RequestPath(arg0 bool) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPath", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestPath indicates an expected call of RequestPath
func (mr *MockContextMockRecorder) RequestPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPath", reflect.TypeOf((*MockContext)(nil).RequestPath), arg0)
}

// ResetResponseWriter mocks base method
func (m *MockContext) ResetResponseWriter(arg0 context.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetResponseWriter", arg0)
}

// ResetResponseWriter indicates an expected call of ResetResponseWriter
func (mr *MockContextMockRecorder) ResetResponseWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetResponseWriter", reflect.TypeOf((*MockContext)(nil).ResetResponseWriter), arg0)
}

// ResponseWriter mocks base method
func (m *MockContext) ResponseWriter() context.ResponseWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResponseWriter")
	ret0, _ := ret[0].(context.ResponseWriter)
	return ret0
}

// ResponseWriter indicates an expected call of ResponseWriter
func (mr *MockContextMockRecorder) ResponseWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResponseWriter", reflect.TypeOf((*MockContext)(nil).ResponseWriter))
}

// RouteExists mocks base method
func (m *MockContext) RouteExists(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// RouteExists indicates an expected call of RouteExists
func (mr *MockContextMockRecorder) RouteExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteExists", reflect.TypeOf((*MockContext)(nil).RouteExists), arg0, arg1)
}

// SendFile mocks base method
func (m *MockContext) SendFile(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFile indicates an expected call of SendFile
func (mr *MockContextMockRecorder) SendFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFile", reflect.TypeOf((*MockContext)(nil).SendFile), arg0, arg1)
}

// ServeContent mocks base method
func (m *MockContext) ServeContent(arg0 io.ReadSeeker, arg1 string, arg2 time.Time, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeContent", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeContent indicates an expected call of ServeContent
func (mr *MockContextMockRecorder) ServeContent(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeContent", reflect.TypeOf((*MockContext)(nil).ServeContent), arg0, arg1, arg2, arg3)
}

// ServeFile mocks base method
func (m *MockContext) ServeFile(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeFile indicates an expected call of ServeFile
func (mr *MockContextMockRecorder) ServeFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeFile", reflect.TypeOf((*MockContext)(nil).ServeFile), arg0, arg1)
}

// SetCookie mocks base method
func (m *MockContext) SetCookie(arg0 *http.Cookie, arg1 ...context.CookieOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetCookie", varargs...)
}

// SetCookie indicates an expected call of SetCookie
func (mr *MockContextMockRecorder) SetCookie(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockContext)(nil).SetCookie), varargs...)
}

// SetCookieKV mocks base method
func (m *MockContext) SetCookieKV(arg0, arg1 string, arg2 ...context.CookieOption) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetCookieKV", varargs...)
}

// SetCookieKV indicates an expected call of SetCookieKV
func (mr *MockContextMockRecorder) SetCookieKV(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookieKV", reflect.TypeOf((*MockContext)(nil).SetCookieKV), varargs...)
}

// SetCurrentRouteName mocks base method
func (m *MockContext) SetCurrentRouteName(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentRouteName", arg0)
}

// SetCurrentRouteName indicates an expected call of SetCurrentRouteName
func (mr *MockContextMockRecorder) SetCurrentRouteName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentRouteName", reflect.TypeOf((*MockContext)(nil).SetCurrentRouteName), arg0)
}

// SetHandlers mocks base method
func (m *MockContext) SetHandlers(arg0 context.Handlers) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHandlers", arg0)
}

// SetHandlers indicates an expected call of SetHandlers
func (mr *MockContextMockRecorder) SetHandlers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHandlers", reflect.TypeOf((*MockContext)(nil).SetHandlers), arg0)
}

// SetLastModified mocks base method
func (m *MockContext) SetLastModified(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLastModified", arg0)
}

// SetLastModified indicates an expected call of SetLastModified
func (mr *MockContextMockRecorder) SetLastModified(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastModified", reflect.TypeOf((*MockContext)(nil).SetLastModified), arg0)
}

// SetMaxRequestBodySize mocks base method
func (m *MockContext) SetMaxRequestBodySize(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxRequestBodySize", arg0)
}

// SetMaxRequestBodySize indicates an expected call of SetMaxRequestBodySize
func (mr *MockContextMockRecorder) SetMaxRequestBodySize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxRequestBodySize", reflect.TypeOf((*MockContext)(nil).SetMaxRequestBodySize), arg0)
}

// Skip mocks base method
func (m *MockContext) Skip() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Skip")
}

// Skip indicates an expected call of Skip
func (mr *MockContextMockRecorder) Skip() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Skip", reflect.TypeOf((*MockContext)(nil).Skip))
}

// SkipTransactions mocks base method
func (m *MockContext) SkipTransactions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SkipTransactions")
}

// SkipTransactions indicates an expected call of SkipTransactions
func (mr *MockContextMockRecorder) SkipTransactions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SkipTransactions", reflect.TypeOf((*MockContext)(nil).SkipTransactions))
}

// StatusCode mocks base method
func (m *MockContext) StatusCode(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusCode", arg0)
}

// StatusCode indicates an expected call of StatusCode
func (mr *MockContextMockRecorder) StatusCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockContext)(nil).StatusCode), arg0)
}

// StopExecution mocks base method
func (m *MockContext) StopExecution() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopExecution")
}

// StopExecution indicates an expected call of StopExecution
func (mr *MockContextMockRecorder) StopExecution() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopExecution", reflect.TypeOf((*MockContext)(nil).StopExecution))
}

// StreamWriter mocks base method
func (m *MockContext) StreamWriter(arg0 func(io.Writer) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StreamWriter", arg0)
}

// StreamWriter indicates an expected call of StreamWriter
func (mr *MockContextMockRecorder) StreamWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamWriter", reflect.TypeOf((*MockContext)(nil).StreamWriter), arg0)
}

// String mocks base method
func (m *MockContext) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockContextMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockContext)(nil).String))
}

// Subdomain mocks base method
func (m *MockContext) Subdomain() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subdomain")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subdomain indicates an expected call of Subdomain
func (mr *MockContextMockRecorder) Subdomain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subdomain", reflect.TypeOf((*MockContext)(nil).Subdomain))
}

// Text mocks base method
func (m *MockContext) Text(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Text indicates an expected call of Text
func (mr *MockContextMockRecorder) Text(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockContext)(nil).Text), arg0)
}

// TransactionsSkipped mocks base method
func (m *MockContext) TransactionsSkipped() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionsSkipped")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TransactionsSkipped indicates an expected call of TransactionsSkipped
func (mr *MockContextMockRecorder) TransactionsSkipped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionsSkipped", reflect.TypeOf((*MockContext)(nil).TransactionsSkipped))
}

// Translate mocks base method
func (m *MockContext) Translate(arg0 string, arg1 ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Translate", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Translate indicates an expected call of Translate
func (mr *MockContextMockRecorder) Translate(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockContext)(nil).Translate), varargs...)
}

// TryWriteGzip mocks base method
func (m *MockContext) TryWriteGzip(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryWriteGzip", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryWriteGzip indicates an expected call of TryWriteGzip
func (mr *MockContextMockRecorder) TryWriteGzip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryWriteGzip", reflect.TypeOf((*MockContext)(nil).TryWriteGzip), arg0)
}

// URLParam mocks base method
func (m *MockContext) URLParam(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParam", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// URLParam indicates an expected call of URLParam
func (mr *MockContextMockRecorder) URLParam(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParam", reflect.TypeOf((*MockContext)(nil).URLParam), arg0)
}

// URLParamBool mocks base method
func (m *MockContext) URLParamBool(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamBool", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLParamBool indicates an expected call of URLParamBool
func (mr *MockContextMockRecorder) URLParamBool(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamBool", reflect.TypeOf((*MockContext)(nil).URLParamBool), arg0)
}

// URLParamDefault mocks base method
func (m *MockContext) URLParamDefault(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamDefault", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// URLParamDefault indicates an expected call of URLParamDefault
func (mr *MockContextMockRecorder) URLParamDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamDefault", reflect.TypeOf((*MockContext)(nil).URLParamDefault), arg0, arg1)
}

// URLParamEscape mocks base method
func (m *MockContext) URLParamEscape(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamEscape", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// URLParamEscape indicates an expected call of URLParamEscape
func (mr *MockContextMockRecorder) URLParamEscape(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamEscape", reflect.TypeOf((*MockContext)(nil).URLParamEscape), arg0)
}

// URLParamExists mocks base method
func (m *MockContext) URLParamExists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// URLParamExists indicates an expected call of URLParamExists
func (mr *MockContextMockRecorder) URLParamExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamExists", reflect.TypeOf((*MockContext)(nil).URLParamExists), arg0)
}

// URLParamFloat64 mocks base method
func (m *MockContext) URLParamFloat64(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamFloat64", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLParamFloat64 indicates an expected call of URLParamFloat64
func (mr *MockContextMockRecorder) URLParamFloat64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamFloat64", reflect.TypeOf((*MockContext)(nil).URLParamFloat64), arg0)
}

// URLParamFloat64Default mocks base method
func (m *MockContext) URLParamFloat64Default(arg0 string, arg1 float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamFloat64Default", arg0, arg1)
	ret0, _ := ret[0].(float64)
	return ret0
}

// URLParamFloat64Default indicates an expected call of URLParamFloat64Default
func (mr *MockContextMockRecorder) URLParamFloat64Default(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamFloat64Default", reflect.TypeOf((*MockContext)(nil).URLParamFloat64Default), arg0, arg1)
}

// URLParamInt mocks base method
func (m *MockContext) URLParamInt(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamInt", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLParamInt indicates an expected call of URLParamInt
func (mr *MockContextMockRecorder) URLParamInt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamInt", reflect.TypeOf((*MockContext)(nil).URLParamInt), arg0)
}

// URLParamInt32Default mocks base method
func (m *MockContext) URLParamInt32Default(arg0 string, arg1 int32) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamInt32Default", arg0, arg1)
	ret0, _ := ret[0].(int32)
	return ret0
}

// URLParamInt32Default indicates an expected call of URLParamInt32Default
func (mr *MockContextMockRecorder) URLParamInt32Default(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamInt32Default", reflect.TypeOf((*MockContext)(nil).URLParamInt32Default), arg0, arg1)
}

// URLParamInt64 mocks base method
func (m *MockContext) URLParamInt64(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamInt64", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLParamInt64 indicates an expected call of URLParamInt64
func (mr *MockContextMockRecorder) URLParamInt64(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamInt64", reflect.TypeOf((*MockContext)(nil).URLParamInt64), arg0)
}

// URLParamInt64Default mocks base method
func (m *MockContext) URLParamInt64Default(arg0 string, arg1 int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamInt64Default", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// URLParamInt64Default indicates an expected call of URLParamInt64Default
func (mr *MockContextMockRecorder) URLParamInt64Default(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamInt64Default", reflect.TypeOf((*MockContext)(nil).URLParamInt64Default), arg0, arg1)
}

// URLParamIntDefault mocks base method
func (m *MockContext) URLParamIntDefault(arg0 string, arg1 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamIntDefault", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// URLParamIntDefault indicates an expected call of URLParamIntDefault
func (mr *MockContextMockRecorder) URLParamIntDefault(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamIntDefault", reflect.TypeOf((*MockContext)(nil).URLParamIntDefault), arg0, arg1)
}

// URLParamTrim mocks base method
func (m *MockContext) URLParamTrim(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParamTrim", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// URLParamTrim indicates an expected call of URLParamTrim
func (mr *MockContextMockRecorder) URLParamTrim(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParamTrim", reflect.TypeOf((*MockContext)(nil).URLParamTrim), arg0)
}

// URLParams mocks base method
func (m *MockContext) URLParams() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLParams")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// URLParams indicates an expected call of URLParams
func (mr *MockContextMockRecorder) URLParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLParams", reflect.TypeOf((*MockContext)(nil).URLParams))
}

// UnmarshalBody mocks base method
func (m *MockContext) UnmarshalBody(arg0 interface{}, arg1 context.Unmarshaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalBody", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalBody indicates an expected call of UnmarshalBody
func (mr *MockContextMockRecorder) UnmarshalBody(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalBody", reflect.TypeOf((*MockContext)(nil).UnmarshalBody), arg0, arg1)
}

// UploadFormFiles mocks base method
func (m *MockContext) UploadFormFiles(arg0 string, arg1 ...func(context.Context, *multipart.FileHeader)) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFormFiles", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFormFiles indicates an expected call of UploadFormFiles
func (mr *MockContextMockRecorder) UploadFormFiles(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFormFiles", reflect.TypeOf((*MockContext)(nil).UploadFormFiles), varargs...)
}

// Values mocks base method
func (m *MockContext) Values() *memstore.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].(*memstore.Store)
	return ret0
}

// Values indicates an expected call of Values
func (mr *MockContextMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockContext)(nil).Values))
}

// View mocks base method
func (m *MockContext) View(arg0 string, arg1 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "View", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// View indicates an expected call of View
func (mr *MockContextMockRecorder) View(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockContext)(nil).View), varargs...)
}

// ViewData mocks base method
func (m *MockContext) ViewData(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ViewData", arg0, arg1)
}

// ViewData indicates an expected call of ViewData
func (mr *MockContextMockRecorder) ViewData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewData", reflect.TypeOf((*MockContext)(nil).ViewData), arg0, arg1)
}

// ViewLayout mocks base method
func (m *MockContext) ViewLayout(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ViewLayout", arg0)
}

// ViewLayout indicates an expected call of ViewLayout
func (mr *MockContextMockRecorder) ViewLayout(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewLayout", reflect.TypeOf((*MockContext)(nil).ViewLayout), arg0)
}

// VisitAllCookies mocks base method
func (m *MockContext) VisitAllCookies(arg0 func(string, string)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "VisitAllCookies", arg0)
}

// VisitAllCookies indicates an expected call of VisitAllCookies
func (mr *MockContextMockRecorder) VisitAllCookies(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisitAllCookies", reflect.TypeOf((*MockContext)(nil).VisitAllCookies), arg0)
}

// Write mocks base method
func (m *MockContext) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockContextMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockContext)(nil).Write), arg0)
}

// WriteGzip mocks base method
func (m *MockContext) WriteGzip(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteGzip", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteGzip indicates an expected call of WriteGzip
func (mr *MockContextMockRecorder) WriteGzip(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteGzip", reflect.TypeOf((*MockContext)(nil).WriteGzip), arg0)
}

// WriteNotModified mocks base method
func (m *MockContext) WriteNotModified() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteNotModified")
}

// WriteNotModified indicates an expected call of WriteNotModified
func (mr *MockContextMockRecorder) WriteNotModified() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteNotModified", reflect.TypeOf((*MockContext)(nil).WriteNotModified))
}

// WriteString mocks base method
func (m *MockContext) WriteString(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteString", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteString indicates an expected call of WriteString
func (mr *MockContextMockRecorder) WriteString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteString", reflect.TypeOf((*MockContext)(nil).WriteString), arg0)
}

// WriteWithExpiration mocks base method
func (m *MockContext) WriteWithExpiration(arg0 []byte, arg1 time.Time) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteWithExpiration", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteWithExpiration indicates an expected call of WriteWithExpiration
func (mr *MockContextMockRecorder) WriteWithExpiration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWithExpiration", reflect.TypeOf((*MockContext)(nil).WriteWithExpiration), arg0, arg1)
}

// Writef mocks base method
func (m *MockContext) Writef(arg0 string, arg1 ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Writef", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writef indicates an expected call of Writef
func (mr *MockContextMockRecorder) Writef(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writef", reflect.TypeOf((*MockContext)(nil).Writef), varargs...)
}

// XML mocks base method
func (m *MockContext) XML(arg0 interface{}, arg1 ...context.XML) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "XML", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// XML indicates an expected call of XML
func (mr *MockContextMockRecorder) XML(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XML", reflect.TypeOf((*MockContext)(nil).XML), varargs...)
}

// YAML mocks base method
func (m *MockContext) YAML(arg0 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YAML", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// YAML indicates an expected call of YAML
func (mr *MockContextMockRecorder) YAML(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAML", reflect.TypeOf((*MockContext)(nil).YAML), arg0)
}
